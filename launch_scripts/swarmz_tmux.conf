# SWARMz4 tmux configuration

# Set window base index to 0
set-option -g base-index 0

# Enable mouse mode for scrolling
set -g mouse on

# Increase scrollback buffer size
set -g history-limit 10000

# Use vi mode-keys for better keyboard scrolling
set -g mode-keys vi

# Clipboard integration for mouse selections
# Copy mouse selection to X clipboard
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Copy on mouse selection and exit copy-mode
bind-key -T copy-mode MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"

# Setup copy/paste keybindings
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# Allow xterm titles in terminal
set -g set-titles on

# Disable command echoing
set -g status-keys emacs

# Create a new session named "swarmz" if it doesn't exist
new-session -d -s swarmz -n "Control"

# Window 0: Process killer, QGC, and ROS bridges
send-keys -t swarmz:0 "cd $SWARMZ4_PATH/launch_scripts && clear" C-m
send-keys -t swarmz:0 "echo '=== SWARMz4 Control Panel ==='" C-m
send-keys -t swarmz:0 "echo" C-m
send-keys -t swarmz:0 "echo 'Cleaning up running processes...'" C-m
# Use a more robust pkill command for QGroundControl
send-keys -t swarmz:0 "echo 'Killing existing QGroundControl instances...'" C-m
send-keys -t swarmz:0 "pkill -f 'QGroundControl' || true" C-m
send-keys -t swarmz:0 "pkill -f 'px4' || true" C-m
send-keys -t swarmz:0 "pkill -f 'MicroXRCEAgent' || true" C-m
send-keys -t swarmz:0 "pkill -f 'gz sim' || true" C-m
send-keys -t swarmz:0 "pkill -f 'parameter_bridge' || true" C-m
send-keys -t swarmz:0 "sleep 2" C-m

# QGroundControl with absolute path and verification
send-keys -t swarmz:0 "HEADLESS_MODE=\"\${HEADLESS_LEVEL:-0}\"" C-m
send-keys -t swarmz:0 "QGC_PATH=\"\${SWARMZ4_PATH}/launch_scripts/QGroundControl.AppImage\"" C-m
send-keys -t swarmz:0 "if [ ! -f \"\$QGC_PATH\" ]; then" C-m
send-keys -t swarmz:0 "  echo 'ERROR: QGroundControl.AppImage not found at \$QGC_PATH'" C-m
send-keys -t swarmz:0 "  QGC_PATH=\"\$(which QGroundControl.AppImage 2>/dev/null)\"" C-m
send-keys -t swarmz:0 "  if [ -z \"\$QGC_PATH\" ]; then" C-m
send-keys -t swarmz:0 "    echo 'QGroundControl not found in PATH either. Skipping launch.'" C-m
send-keys -t swarmz:0 "  else" C-m
send-keys -t swarmz:0 "    echo 'Found QGroundControl at: \$QGC_PATH'" C-m
send-keys -t swarmz:0 "  fi" C-m
send-keys -t swarmz:0 "fi" C-m
send-keys -t swarmz:0 "if [ -n \"\$QGC_PATH\" ] && [ -f \"\$QGC_PATH\" ]; then" C-m
send-keys -t swarmz:0 "  if [ \"\$HEADLESS_MODE\" = \"2\" ]; then" C-m
send-keys -t swarmz:0 "    echo 'Launching QGroundControl in headless mode...'" C-m
send-keys -t swarmz:0 "    if command -v xvfb-run &>/dev/null; then" C-m
send-keys -t swarmz:0 "      xvfb-run -a \"\$QGC_PATH\" &" C-m
send-keys -t swarmz:0 "    else" C-m
send-keys -t swarmz:0 "      \"\$QGC_PATH\" &" C-m
send-keys -t swarmz:0 "    fi" C-m
send-keys -t swarmz:0 "  else" C-m
send-keys -t swarmz:0 "    echo 'Launching QGroundControl...'" C-m
send-keys -t swarmz:0 "    \"\$QGC_PATH\" &" C-m
send-keys -t swarmz:0 "  fi" C-m
send-keys -t swarmz:0 "  QGC_PID=$!" C-m
send-keys -t swarmz:0 "  echo \"QGroundControl launched with PID: \$QGC_PID\"" C-m
send-keys -t swarmz:0 "fi" C-m
send-keys -t swarmz:0 "sleep 2" C-m

send-keys -t swarmz:0 "cd $SWARMZ4_PATH/ros2_ws && source install/setup.bash" C-m
send-keys -t swarmz:0 "echo 'Starting ROS 2 bridges...'" C-m

# ROS bridges - Fixed conditional output
send-keys -t swarmz:0 "HEADLESS_MODE=\"\${HEADLESS_LEVEL:-0}\"" C-m
send-keys -t swarmz:0 "if [ \"\$HEADLESS_MODE\" = \"2\" ]; then" C-m
send-keys -t swarmz:0 "  ros2 run ros_gz_bridge parameter_bridge /clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock > /dev/null 2>&1 &" C-m
send-keys -t swarmz:0 "  ros2 launch px4_gz_bridge px4_laser_gz_bridge.launch.py nb_of_drones:=10 > /dev/null 2>&1 &" C-m
send-keys -t swarmz:0 "else" C-m
send-keys -t swarmz:0 "  ros2 run ros_gz_bridge parameter_bridge /clock@rosgraph_msgs/msg/Clock[gz.msgs.Clock &" C-m
send-keys -t swarmz:0 "  ros2 launch px4_gz_bridge px4_laser_gz_bridge.launch.py nb_of_drones:=10 &" C-m
send-keys -t swarmz:0 "fi" C-m

send-keys -t swarmz:0 "echo" C-m
send-keys -t swarmz:0 "echo '=== All services started ==='" C-m
send-keys -t swarmz:0 "echo" C-m

# Window 1: User terminal - special handling to avoid command echo
new-window -t swarmz:1 -n "User"
send-keys -t swarmz:1 "clear && cat << 'EOF'
=== SWARMz4 Game Session Active ===

User terminal - you can use this window for custom commands

Type 'help' for available SWARMz4 commands

EOF
" C-m

# Window 2: Micro XRCE-DDS Agent
new-window -t swarmz:2 -n "XRCE-Agent"
send-keys -t swarmz:2 "cd $SWARMZ4_PATH/Micro-XRCE-DDS-Agent && clear" C-m
send-keys -t swarmz:2 "echo 'Starting MicroXRCEAgent...' && MicroXRCEAgent udp4 -p 8888" C-m

# Windows 3-12: PX4 instances (10 drones)
# Team 1 drones (1-5): Windows 3-7
new-window -t swarmz:3 -n "PX4-1"
send-keys -t swarmz:3 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:3 "echo 'Launching PX4 instance 1...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='50,30,0,0,0,0' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 1" C-m

new-window -t swarmz:4 -n "PX4-2"
send-keys -t swarmz:4 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:4 "echo 'Launching PX4 instance 2...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='50,32,0,0,0,0' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 2" C-m

new-window -t swarmz:5 -n "PX4-3"
send-keys -t swarmz:5 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:5 "echo 'Launching PX4 instance 3...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='50,34,0,0,0,0' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 3" C-m

new-window -t swarmz:6 -n "PX4-4"
send-keys -t swarmz:6 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:6 "echo 'Launching PX4 instance 4...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='50,36,0,0,0,0' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 4" C-m

new-window -t swarmz:7 -n "PX4-5"
send-keys -t swarmz:7 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:7 "echo 'Launching PX4 instance 5...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='50,38,0,0,0,0' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 5" C-m

# Team 2 drones (6-10): Windows 8-12
new-window -t swarmz:8 -n "PX4-6"
send-keys -t swarmz:8 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:8 "echo 'Launching PX4 instance 6...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='450,30,0,0,0,3.14159' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 6" C-m

new-window -t swarmz:9 -n "PX4-7"
send-keys -t swarmz:9 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:9 "echo 'Launching PX4 instance 7...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='450,32,0,0,0,3.14159' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 7" C-m

new-window -t swarmz:10 -n "PX4-8"
send-keys -t swarmz:10 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:10 "echo 'Launching PX4 instance 8...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='450,34,0,0,0,3.14159' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 8" C-m

new-window -t swarmz:11 -n "PX4-9"
send-keys -t swarmz:11 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:11 "echo 'Launching PX4 instance 9...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='450,36,0,0,0,3.14159' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 9" C-m

new-window -t swarmz:12 -n "PX4-10" 
send-keys -t swarmz:12 "cd $SWARMZ4_PATH/PX4-Autopilot && clear" C-m
send-keys -t swarmz:12 "echo 'Launching PX4 instance 10...' && TIMEOUT=10 PX4_SYS_AUTOSTART=4017 PX4_GZ_MODEL_POSE='450,38,0,0,0,3.14159' PX4_SIM_MODEL=gz_x500_lidar_front PX4_GZ_STANDALONE=1 ./build/px4_sitl_default/bin/px4 -i 10" C-m

# Window 13: Gazebo - Fixed conditional headless mode
new-window -t swarmz:13 -n "Gazebo"
send-keys -t swarmz:13 "cd $SWARMZ4_PATH/PX4-Autopilot/Tools/simulation/gz && clear" C-m
send-keys -t swarmz:13 "HEADLESS_MODE=\"\${HEADLESS_LEVEL:-0}\"" C-m
send-keys -t swarmz:13 "if [ \"\$HEADLESS_MODE\" = \"1\" ] || [ \"\$HEADLESS_MODE\" = \"2\" ]; then" C-m
send-keys -t swarmz:13 "  echo 'Launching Gazebo in headless mode...'" C-m
send-keys -t swarmz:13 "  python3 simulation-gazebo --world swarmz_world --headless" C-m
send-keys -t swarmz:13 "else" C-m
send-keys -t swarmz:13 "  echo 'Launching Gazebo...'" C-m
send-keys -t swarmz:13 "  python3 simulation-gazebo --world swarmz_world" C-m
send-keys -t swarmz:13 "fi" C-m

# Switch back to window 1 (user terminal)
select-window -t swarmz:1
